@page "/"
@using Rummy.Client.Services
@using System.Drawing
@inject AuthService AuthService
@inject ChatService ChatService
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<button class="btn btn-primary" type="button" onclick="@JoinRoomAction">Join Room</button>
<button class="btn btn-primary" type="button" onclick="@CreateRoomAction">Create Room</button>

<div class="board fixed-bottom swappable-container">
    <div class="row">
        <div class="col-5"></div>
        <div class="cell">
            <div>1</div>
        </div>
        <div class="cell">
            <div>2</div>
        </div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
    </div>
    <div class="row">
        <div class="col-5"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
    </div>
</div>

<div class="main-row swappable-container">
    <div class="row">
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
    </div>
</div>

@functions{
    bool firstRender = true;

    protected override async Task OnInitAsync()
    {
        await ChatService.StartAsync();
    }

    protected override async Task OnAfterRenderAsync()
    {
        if (firstRender)
        {
            firstRender = false;

            //for (int i = 0; i < 5; i++)
            //    for (int j = 0; j < 13; j++)
            await JSRuntime.Current.InvokeAsync<bool>("cropImage", 1, 1);
        }
    }

    void JoinRoomAction()
    {
        UriHelper.NavigateTo("rooms");
    }

    void CreateRoomAction()
    {
        UriHelper.NavigateTo("createRoom");
    }
}

