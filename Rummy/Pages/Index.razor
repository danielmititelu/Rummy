@page "/"
@inject IJSRuntime JSRuntime
@using Models

<div class="board fixed-bottom swappable-container">
    <div class="row">
        <div class="col-5"></div>
        <button class="btn btn-success" @onclick="@AddPiece">Add piece</button>
    </div>
    <div class="row">
        <div class="col-5"></div>
        @foreach (var piece in pieces)
        {
            <Piece Drop="@OnPieceDrop" Model="@piece"></Piece>

            @*<Cell>
                    <Piece Number="@piece.Number.ToString()" Color="red"></Piece>
                </Cell>*@
        }

    </div>
    <div class="row">
        <div class="col-5"></div>
        @for (int i = 0; i <= 13; i++)
        {
            <Cell />
        }
    </div>
</div>

<div class="main-row swappable-container">
    <div class="row">
        @for (int i = 0; i < AppState.PiecesOnTable.Count + 1; i++)
        {
            <Cell />
        }
    </div>
</div>

@code {
    bool firstRender = true;
    List<PieceModel> pieces = new List<PieceModel>();

    protected override async Task OnInitAsync()
    {
        AppState.OnPiecesOnTableChange += PiecesOnTableChange;
        Get14Pieces();
    }

    void OnPieceDrop(PieceModel source, PieceModel target)
    {
        var sourceIndex = pieces.IndexOf(source);
        var targetIndex = pieces.IndexOf(target);
        var tmp = pieces[sourceIndex];
        pieces[sourceIndex] = pieces[targetIndex];
        pieces[targetIndex] = tmp;
        StateHasChanged();
    }

    void Get14Pieces()
    {
        //get 14 pieces for testing purpose
        for (int i = 0; i <= 14; i++)
        {
            pieces.Add(new PieceModel(i, i, PieceModel.Colors.Blue));
        }
    }

    protected override async Task OnAfterRenderAsync()
    {
        if (firstRender)
        {
            firstRender = false;
            //await JSRuntime.InvokeAsync<bool>("mountDraggable");
        }
    }

    void AddPiece()
    {
        pieces.Add(new PieceModel(40, 4, PieceModel.Colors.Black));
    }

    void PiecesOnTableChange()
    {
        Console.WriteLine("Added piece:" + AppState.PiecesOnTable.Last());
        StateHasChanged();
    }
}
