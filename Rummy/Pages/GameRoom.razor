@page "/gameRoom/{RoomName}"
@using Models
@using Services

<h3>Players:</h3>
@foreach (var player in players)
{
    <div>@player</div>
}


<div class="main-row">
    <div class="row">
        @foreach (var piece in piecesOnTable)
        {
            <PieceComponent OnDrop="@DropPieceOnTable" Model="@piece"></PieceComponent>
        }
    </div>
</div>
<br />

<div class="draw-piece">
    <div>Draw here:</div>
    <PieceComponent OnDrop="@EmptyDropPiece" Model="@drawPiece"></PieceComponent>
</div>

<div class="fixed-bottom">
    <div class="board">

        <div class="row">
            <div style="color:red">@errorMessage</div>
        </div>

        @for (int x = 0; x < piecesOnBoard.GetLength(0); ++x)
        {
            <div class="row">
                @for (int y = 0; y < piecesOnBoard.GetLength(1); ++y)
                {
                    <PieceComponent OnDrop="@DropPieceOnBoard" Model="@piecesOnBoard[x, y]"></PieceComponent>
                }
            </div>
        }
    </div>
</div>


@code {
    [Parameter]
    private string RoomName { get; set; }

    //to do: remove this:
    PieceModel drawPiece = new PieceModel(PieceModel.Types.Empty,
                PieceModel.Locations.PiecesToDraw, 0);

    PieceModel[,] piecesOnBoard = new PieceModel[2, 14];
    List<PieceModel> piecesToDraw = new List<PieceModel>();
    List<PieceModel> piecesOnTable = new List<PieceModel>();
    string errorMessage = "";
    List<string> players = new List<string>();
    RoomState room;

    protected override async Task OnInitAsync()
    {
        room = AllRoomsState.Rooms[RoomName];
        players = room.Players;

        piecesOnTable = new List<PieceModel>
{
            new PieceModel(PieceModel.Types.Empty,
                PieceModel.Locations.Board, 0)
        };

        Get14Pieces();
    }

    void DropPieceOnBoard(PieceModel source, PieceModel target)
    {
        if (target.Type != PieceModel.Types.Empty &&
            source.Location == PieceModel.Locations.PiecesToDraw)
        {
            errorMessage = "You cannot put in the same place as another piece";
            StateHasChanged();
            return;
        }

        if (source.Location == PieceModel.Locations.PiecesToDraw)
        {
            target.Number = 5;
            target.Color = PieceModel.Colors.Red;
            target.Type = PieceModel.Types.Normal;
            StateHasChanged();
            return;
        }

        var tmpX = source.X;
        var tmpY = source.Y;
        var tmpLoc = source.Location;
        source.X = target.X;
        source.Y = target.Y;
        source.Location = target.Location;
        target.X = tmpX;
        target.Y = tmpY;
        target.Location = tmpLoc;

        if (source.Location == PieceModel.Locations.Board)
        {
            piecesOnBoard[source.Y, source.X] = source;
        }

        if (source.Location == PieceModel.Locations.PiecesToDraw)
        {
            piecesToDraw[source.X] = source;
        }

        if (target.Location == PieceModel.Locations.Board)
        {
            piecesOnBoard[target.Y, target.X] = target;
        }

        if (target.Location == PieceModel.Locations.PiecesToDraw)
        {
            piecesToDraw[target.X] = target;
        }

        StateHasChanged();
    }

    void EmptyDropPiece(PieceModel source, PieceModel target) { }

    void DropPieceOnTable(PieceModel source, PieceModel target)
    {
        if (source.Location != PieceModel.Locations.Board)
        {
            errorMessage = "You must put a piece from the board to the table";
            return;
        }

        if (source.Type == PieceModel.Types.Empty)
        {
            return;
        }

        var tmp = source.ShallowCopy();
        piecesOnTable.Insert(piecesOnTable.Count - 1, tmp);
        source.Type = PieceModel.Types.Empty;
        source.Number = 0;
        StateHasChanged();
    }

    void Get14Pieces()
    {
        //get 14 pieces for testing purpose
        for (int i = 0; i <= 13; i++)
        {
            piecesOnBoard[0, i] = new PieceModel(i, PieceModel.Colors.Blue,
                PieceModel.Locations.Board, i, 0);
        }

        for (int i = 0; i <= 13; i++)
        {
            piecesOnBoard[1, i] = new PieceModel(PieceModel.Types.Empty,
                PieceModel.Locations.Board, i, 1);
        }
    }
}