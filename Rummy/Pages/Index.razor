@page "/"
@inject IJSRuntime JSRuntime
@using Models
@using Extensions

<div class="board fixed-bottom swappable-container">
    <div class="row">
        <div class="col-5"></div>
        <button class="btn btn-success" @onclick="@AddPiece">Add piece</button>
    </div>

    @for (int x = 0; x < pieces.GetLength(0); ++x)
    {
        <div class="row">
            <div class="col-5"></div>
            @for (int y = 0; y < pieces.GetLength(1); ++y)
            {
                <Piece OnDrop="@PieceDrop" Model="@pieces[x, y]"></Piece>
            }

        </div>
    }
</div>

<div class="main-row swappable-container">
    <div class="row">
            <Cell />
    </div>
</div>

@code {
    PieceModel[,] pieces = new PieceModel[2, 14];

    protected override async Task OnInitAsync()
    {
        Get14Pieces();
    }

    void PieceDrop(PieceModel source, PieceModel target)
    {
        var (sourceX, sourceY) = pieces.CoordinatesOf(source);
        var (targetX, targetY) = pieces.CoordinatesOf(target);
        var tmp = pieces[sourceX, sourceY];
        pieces[sourceX, sourceY] = pieces[targetX, targetY];
        pieces[targetX, targetY] = tmp;
        StateHasChanged();
    }

    void Get14Pieces()
    {
        //get 14 pieces for testing purpose
        for (int i = 0; i <= 13; i++)
        {
            pieces[0, i] = new PieceModel(i, i, PieceModel.Colors.Blue);
        }

        for (int i = 0; i <= 13; i++)
        {
            pieces[1, i] = new PieceModel(i, i, PieceModel.Colors.Black);
        }
    }

    void AddPiece()
    {
        //pieces.Add(new PieceModel(40, 4, PieceModel.Colors.Black));
    }
}
