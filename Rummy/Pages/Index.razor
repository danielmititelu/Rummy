@page "/"
@using Services
@inject IUriHelper UriHelper

<AuthorizeView>
    <Authorized>
        <div class="index-page">
            <div class="row">
                <select @bind="@selectedRoom" class="form-control" multiple>
                    @foreach (var room in AllRoomsState.Rooms)
                    {
                        var optionValue = $"{room.Key} - {room.Value.Players.Count}/4";
                        <option value="@room.Key">@optionValue</option>
                    }
                </select>
            </div>
            <div class="row">
                <button class="btn btn-primary" @onclick="@JoinRoom">Join Room</button>
            </div>
            <div class="row create-room">
                <input class="form-control" @bind="@RoomName" />
            </div>
            <div class="row">
                <button class="btn btn-primary" @onclick="@CreateRoom">Create Room</button>
            </div>
        </div>
        <ErrorMessage Message="@errorMessage" />
    </Authorized>
    <NotAuthorized>
        Log in!
    </NotAuthorized>
</AuthorizeView>


@code {
    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    string userName;
    string selectedRoom;
    public string RoomName { get; set; }
    string errorMessage = "";

    protected override async Task OnInitAsync()
    {
        AllRoomsState.OnRoomAdded += RoomAdded;

        var authState = await authenticationStateTask;
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;
        }
    }

    void RoomAdded()
    {
        Invoke(() => StateHasChanged());
    }

    void CreateRoom()
    {
        if (RoomName == "" || RoomName == null)
        {
            ShowError("Room name cannot be empty");
            return;
        }

        if (AllRoomsState.Rooms.ContainsKey(RoomName))
        {
            ShowError("A room already exists with that name");
            return;
        }

        AllRoomsState.AddRoom(RoomName, userName);
        UriHelper.NavigateTo($"/waitingRoom/{RoomName}");
    }

    void JoinRoom()
    {
        if (selectedRoom != null)
        {
            ShowError("You must select a room");
            return;
        }

        if (AllRoomsState.Rooms[selectedRoom].Players.Count == 4)
        {
            ShowError("Room is already full");
            return;
        }

        AllRoomsState.JoinRoom(selectedRoom, userName);
        UriHelper.NavigateTo($"/waitingRoom/{selectedRoom}");
    }

    private void ShowError(string message)
    {
        errorMessage = message;
        StateHasChanged();

        Task.Run(async delegate
        {
            await Task.Delay(5000);
            errorMessage = "";
            await Invoke(() => StateHasChanged());
        });
    }
}
