@using Rummy.Services
@using Models
@inject DragAndDropService DragAndDropService

@{
    var draggable = Model.Type != PieceModel.Types.Empty;
    var className = $"{dragOverClass} {dragStartClass} {clickClass}";
}

<div class="@className" ondragover="event.preventDefault()" @ondrop="@Drop">
    <div draggable=@draggable.ToString() @ondragstart="@DragStart" @ondragenter="@DragEnter"
         @ondragleave="@DragLeave" @ondragend="@DragEnd" @onmousedown="@MouseDown">
        @if (Model.Type == PieceModel.Types.Normal)
        {
            <div class="@Model.Color.ToString().ToLower() piece">@Model.Number</div>
        }

        @if (Model.Type == PieceModel.Types.Joker)
        {
            <div class="piece">
                <img class="joker" src="/smiley-face.png"/>
            </div>
        }

        @if (Model.Type == PieceModel.Types.Empty)
        {
            <div class="piece empty-piece"></div>
        }

        @if (Model.Type == PieceModel.Types.FaceDown)
        {
            <div class="piece face-down-piece"></div>
        }
    </div>
</div>

@code {
    [Parameter]
    private PieceModel Model { get; set; }

    [Parameter]
    Action<PieceModel, PieceModel> OnDrop { get; set; }

    string dragOverClass;
    string dragStartClass;
    string clickClass;

    void Drop()
    {
        OnDrop(DragAndDropService.Model, Model);
        dragOverClass = "";
    }

    void DragStart()
    {
        DragAndDropService.StartDrag(Model);
        dragStartClass = "drag-start";
    }

    void DragEnter()
    {
        dragOverClass = "over";
    }

    void DragLeave()
    {
        dragOverClass = "";
    }

    void DragEnd()
    {
        dragStartClass = "";
        dragOverClass = "";
        clickClass = "";
    }

    void MouseDown()
    {
        clickClass = "piece-click";
    }
}
