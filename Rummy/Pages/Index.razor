@page "/"
@inject IJSRuntime JSRuntime

<div class="board fixed-bottom swappable-container">
    <div class="row">
        <div class="col-5"></div>
        <button class="btn btn-success" @onclick="@AddPiece">Add piece</button>
    </div>
    <div class="row">
        <div class="col-5"></div>
        <div class="cell">
            <Piece Number="12" Color="red"></Piece>
        </div>
        <div class="cell">
            <Piece Number="4" Color="blue"></Piece>
        </div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
        <div class="cell"></div>
    </div>
    <div class="row">
        <div class="col-5"></div>
        @for (int i = 0; i <= 13; i++)
        {
            <Cell />
        }
    </div>
</div>

<div class="main-row swappable-container">
    <div class="row">
        @for (int i = 0; i < AppState.PiecesOnTable.Count + 1; i++)
        {
            <Cell />
        }
    </div>
</div>

@code {
    bool firstRender = true;

    protected override async Task OnInitAsync()
    {
        AppState.OnPiecesOnTableChange += PiecesOnTableChange;
    }

    protected override async Task OnAfterRenderAsync()
    {
        if (firstRender)
        {
            firstRender = false;

            //for (int i = 0; i < 5; i++)
            //    for (int j = 0; j < 13; j++)
            await JSRuntime.InvokeAsync<bool>("mountDraggable");
        }
    }

    void AddPiece()
    {
        // var response = DraggableInterop.Test();
        Console.WriteLine("TEst");
    }

    void PiecesOnTableChange()
    {
        Console.WriteLine("Added piece:" + AppState.PiecesOnTable.Last());
        StateHasChanged();
    }
}
