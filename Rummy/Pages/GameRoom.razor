@page "/gameRoom/{RoomName}"
@using Models
@using Services
@inject IUriHelper UriHelper

<div class="main-row">
    @foreach (var piece in room.Game.PiecesOnTable)
    {
        <PieceComponent OnDrop="@DropPieceOnTable" Model="@piece" />
    }
</div>

<div class="ml-auto mr-auto row">
    @{
        var playerOrder = room.GetPlayersInOrder(userName);
    }
    @foreach (var playerName in playerOrder)
    {
        var player = room.Game.Players[playerName];
        var index = playerOrder.IndexOf(playerName);
        var playerTurnMark = playerName == room.GetCurrentPlayer() ? "X" : "";

        <div class="player-@index-sets">
            <div class="text-center medium-font">Score: @player.Score</div>
            <div class="sets">
                @for (int i = 0; i < player.Sets.Count; i++)
                {
                    var set = player.Sets[i];
                    var setPieceLeft = new PieceModel(PieceModel.Types.Empty,
                        PieceModel.Locations.piecesSetOnTable)
                    {
                        SetPlayerName = playerName,
                        SetIndex = i,
                        RightOfSet = false
                    };

                    var setPieceRight = new PieceModel(PieceModel.Types.Empty,
                        PieceModel.Locations.piecesSetOnTable)
                    {
                        SetPlayerName = playerName,
                        SetIndex = i,
                        RightOfSet = true
                    };
                    <div>
                        <div class="ml-auto mr-auto row">
                            <PieceComponent OnDrop="@DropPieceOnSet" Model="@setPieceLeft" />
                            @foreach (var piece in set)
                            {
                                <PieceComponent OnDrop="@EmptyDropPiece" Model="@piece" />
                            }
                            <PieceComponent OnDrop="@DropPieceOnSet" Model="@setPieceRight" />
                        </div>
                    </div>
                }

                @if (userName == playerName)
                {
                    <div class="set">
                        @foreach (var piece in setToDropOnTable)
                        {
                            <PieceComponent OnDrop="@DropPieceOnSetToDropOnTable" Model="@piece" />
                        }
                    </div>
                }
            </div>
            <div class="text-center medium-font">@playerName @playerTurnMark</div>
        </div>
    }
</div>

<div class="fixed-bottom">
    <div style="width:200px" />
    <div class="board">
        @if (!room.Game.HasDrawnPiece && room.GetCurrentPlayer() == userName)
        {
            <div class="ml-auto mr-auto">
                <PieceComponent OnDrop="@EmptyDropPiece" Model="@drawPiece" />
            </div>
        }
        <div class="board">
            @for (int x = 0; x < piecesOnBoard.GetLength(0); ++x)
            {
                <div class="row">
                    @for (int y = 0; y < piecesOnBoard.GetLength(1); ++y)
                    {
                        <PieceComponent OnDrop="@DropPieceOnBoard" Model="@piecesOnBoard[x, y]" />
                    }
                </div>
            }
        </div>
    </div>

    <div class="game-chat">
        <Chat Username="@userName" Room="@room" />
    </div>
</div>

<ErrorMessage Message="@errorMessage" />
<EndGameModal Players="@room.Game.Players" Show="@room.Game.GameEnded" />

@code {
    [Parameter]
    private string RoomName { get; set; }

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    PieceModel drawPiece = new PieceModel(PieceModel.Types.FaceDown,
    PieceModel.Locations.PiecesToDraw);

    PieceModel[,] piecesOnBoard = new PieceModel[3, 14];

    List<PieceModel> piecesToDraw = new List<PieceModel>();

    List<PieceModel> setToDropOnTable = new List<PieceModel>
    {
        new PieceModel(PieceModel.Types.Empty,
        PieceModel.Locations.SetToDropOnTable),
        new PieceModel(PieceModel.Types.Empty,
        PieceModel.Locations.SetToDropOnTable),
        new PieceModel(PieceModel.Types.Empty,
        PieceModel.Locations.SetToDropOnTable),
    };

    public string Message { get; set; }

    string errorMessage = "";

    RoomState room;
    string userName;

    protected override async Task OnInitAsync()
    {
        if (!AllRoomsState.Rooms.ContainsKey(RoomName))
        {
            UriHelper.NavigateTo("/");
        }
        room = AllRoomsState.Rooms[RoomName];

        room.OnDropPieceOnTable += StateChanged;
        room.OnDropSetOnTable += StateChanged;
        room.OnMessageReceive += StateChanged;
        room.OnGameEnd += StateChanged;

        var authState = await authenticationStateTask;
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;
        }

        piecesOnBoard = PutPiecesOnBoard(room.GetPlayerBoardPieces(userName));
    }


    void StateChanged()
    {
        Invoke(() => StateHasChanged());
    }

    void DropPieceOnBoard(PieceModel source, PieceModel target)
    {
        if (target.Type != PieceModel.Types.Empty &&
        source.Location == PieceModel.Locations.PiecesToDraw)
        {
            ShowError("You cannot put in the same place as another piece");
            return;
        }

        if (source.Location == PieceModel.Locations.PiecesToDraw)
        {
            var response = room.DrawPiece(userName);
            if (!response.Success)
            {
                ShowError(response.Message);
                return;
            }

            target.Number = response.Piece.Number;
            target.Color = response.Piece.Color;
            target.Type = response.Piece.Type;
            StateHasChanged();
            return;
        }

        SwitchPieces(source, target);
        StateHasChanged();
    }

    void EmptyDropPiece(PieceModel source, PieceModel target) { }

    void DropPieceOnSet(PieceModel source, PieceModel target)
    {
        if (source.Location != PieceModel.Locations.Board)
        {
            return;
        }

        var response = room.AddPieceToSet(target.SetIndex, target.SetPlayerName, target.RightOfSet,
            source, userName);
        if (!response.Success)
        {
            ShowError(response.Message);
            return;
        }

        source.Type = PieceModel.Types.Empty;
        source.Number = 0;
        StateHasChanged();
    }

    void DropPieceOnSetToDropOnTable(PieceModel source, PieceModel target)
    {
        if (source.Location != PieceModel.Locations.Board)
        {
            return;
        }

        SwitchPieces(source, target);

        if (setToDropOnTable.All(p => p.Type != PieceModel.Types.Empty))
        {
            var response = room.AddSet(setToDropOnTable, userName);
            if (!response.Success)
            {
                ShowError(response.Message);
            }
            else
            {
                setToDropOnTable = new List<PieceModel>
                {
                    new PieceModel(PieceModel.Types.Empty,
                    PieceModel.Locations.SetToDropOnTable),
                    new PieceModel(PieceModel.Types.Empty,
                    PieceModel.Locations.SetToDropOnTable),
                    new PieceModel(PieceModel.Types.Empty,
                    PieceModel.Locations.SetToDropOnTable),
                };
            }
        }

        StateHasChanged();
    }

    void DropPieceOnTable(PieceModel source, PieceModel target)
    {
        if (source.Location != PieceModel.Locations.Board)
        {
            ShowError("You must put a piece from the board to the table");

            return;
        }

        if (source.Type == PieceModel.Types.Empty)
        {
            return;
        }

        var response = room.DropPieceOnTable(source, userName);
        if (!response.Success)
        {
            ShowError(response.Message);
            return;
        }

        source.Type = PieceModel.Types.Empty;
        source.Number = 0;
        StateHasChanged();
    }

    void SendMessage()
    {
        room.Message($"{userName}: {Message}");
        Message = "";
    }

    private PieceModel[,] PutPiecesOnBoard(List<PieceModel>
        pieces)
    {
        var piecesOnBoard = new PieceModel[3, 14];
        for (int i = 0; i < pieces.Count; i++)
        {
            var piece = pieces[i];
            piecesOnBoard[0, i] = piece.ShallowCopy();
        }

        for (int i = 0; i <= 13; i++)
        {
            piecesOnBoard[1, i] = new PieceModel(PieceModel.Types.Empty,
            PieceModel.Locations.Board);
        }

        for (int i = 0; i <= 13; i++)
        {
            piecesOnBoard[2, i] = new PieceModel(PieceModel.Types.Empty,
            PieceModel.Locations.Board);
        }

        return piecesOnBoard;
    }

    private void ShowError(string message)
    {
        errorMessage = message;
        StateHasChanged();

        Task.Run(async delegate
        {
            await Task.Delay(5000);
            errorMessage = "";
            await Invoke(() => StateHasChanged());
        });
    }

    private void SwitchPieces(PieceModel source, PieceModel target)
    {
        var tmpColor = source.Color;
        var tmpNumber = source.Number;
        var tmpType = source.Type;
        source.Color = target.Color;
        source.Number = target.Number;
        source.Type = target.Type;
        target.Color = tmpColor;
        target.Number = tmpNumber;
        target.Type = tmpType;
    }
}
