@page "/"
@using Services
@inject IUriHelper UriHelper

<AuthorizeView>
    <Authorized>
        <div class="index-page">
            <div class="row">
                <select @bind="@selectedRoom" class="form-control" multiple>
                    @foreach (var room in rooms)
                    {
                        <option value="@room">@room</option>
                    }
                </select>
            </div>
            <div class="row">
                <button class="btn btn-primary" @onclick="@JoinRoom">Join Room</button>
            </div>
            <div class="row create-room">
                <input class="form-control" @bind="@RoomName" />
            </div>
            <div class="row">
                <button class="btn btn-primary" @onclick="@CreateRoom">Create Room</button>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        Log in!
    </NotAuthorized>
</AuthorizeView>


@code {
    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    string userName;
    List<string>
    rooms = new List<string> { "asd", "qwe" };
    string selectedRoom;
    public string RoomName { get; set; }

    protected override async Task OnInitAsync()
    {
        AllRoomsState.OnRoomAdded += RoomAdded;
        rooms = AllRoomsState.Rooms.Keys.ToList();

        var authState = await authenticationStateTask;
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;
        }
    }

    void RoomAdded()
    {
        rooms = AllRoomsState.Rooms.Keys.ToList();
        Invoke(() => StateHasChanged());
    }

    void CreateRoom()
    {
        AllRoomsState.AddRoom(RoomName, userName);
        UriHelper.NavigateTo($"/waitingRoom/{RoomName}");
    }

    void JoinRoom()
    {
        if (selectedRoom != null)
        {
            AllRoomsState.JoinRoom(selectedRoom, userName);
            UriHelper.NavigateTo($"/waitingRoom/{selectedRoom}");
        }
    }
}
